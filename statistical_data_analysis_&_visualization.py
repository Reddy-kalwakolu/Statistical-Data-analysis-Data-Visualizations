# -*- coding: utf-8 -*-
"""Statistical Data Analysis & Visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tBLgc4WGMxl-JXqSoEWr8-vTQwVgBvYv
"""

import pandas as pd  # Correct library for handling data in Python

# Load the dataset from your gist link
df27 = pd.read_csv("https://raw.githubusercontent.com/Reddy-kalwakolu/Activity7_Population/main/BostonHousing.csv")  # Replace YOUR_GIST_LINK_HERE with the actual URL to your dataset

# Display the last few rows of the dataframe
print(df27.tail())

# Basic statistics of the dataset
print(df27.describe())

# Check for any missing values
print(df27.isnull().sum())

# # Plot the frequency distribution.

import seaborn as sns
import matplotlib.pyplot as plt  # This is the correct import for pyplot

# Set the aesthetic style of the plots
sns.set_style("whitegrid")  # You can choose any style like 'whitegrid', 'darkgrid', 'white', 'dark', 'ticks'

features = df27.columns[:-1]  # Excluding the quality column
for feature in features:
    plt.figure(figsize=(7, 4))
    sns.histplot(df27[feature], kde=True, bins=20)
    plt.title(f'Distribution of {feature}')
    plt.xlabel(feature)
    plt.ylabel('Frequency')
    plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Display the pairplot
sns.pairplot(df27, hue='chas', height=2.5)  # Using 'chas' as the hue and setting the plot height to 2.5
plt.show()

# display the Correlation matrix heatmap below
import seaborn as sns
import matplotlib.pyplot as plt

# Compute the correlation matrix
corr = df27.corr()

# Create a heatmap to visualize the correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(corr, annot=True, fmt=".2f", cmap='coolwarm', cbar=True)
plt.title('Correlation Matrix Heatmap')
plt.show()

import altair as alt

# Define a scatter plot
scatter_plot = alt.Chart(df27).mark_point().encode(
    x='rm',  # For example, using 'rm' (average number of rooms) as x-axis
    y='medv',  # Using 'medv' (median value of homes) as y-axis
    color='chas:N',  # Using 'chas' (Charles River dummy variable) as color, treating it as a nominal variable
)

# Define a bar plot
bar_plot = alt.Chart(df27).mark_bar().encode(
    x='rm',  # Using the same 'rm' (average number of rooms) as x-axis
    y='medv',  # Using 'medv' (median value of homes) as y-axis
    color='chas:N'  # Using 'chas' as color, treating it as a nominal variable
).interactive()  # Makes the bar plot interactive

# Concatenate two plots horizontally
final_plot = alt.hconcat(scatter_plot, bar_plot)  # Use alt.vconcat for vertical concatenation

final_plot  # Display the concatenated plot

import altair as alt

# Define an interactive scatter plot
scatter_plot = alt.Chart(df27).mark_point().encode(
    x='rm:Q',  # 'rm' (average number of rooms per dwelling), with 'Q' indicating a quantitative scale
    y='medv:Q',  # 'medv' (median value of owner-occupied homes), with 'Q' indicating a quantitative scale
    color='chas:N',  # 'chas' (Charles River dummy variable), with 'N' indicating a nominal scale
).interactive()  # Makes the scatter plot interactive

scatter_plot  # Display the scatter plot

# Display 2-3 visualizations of your choice and attributes are your wish.
import seaborn as sns
import matplotlib.pyplot as plt

# Box plot of median values by proximity to Charles River
plt.figure(figsize=(8, 6))
sns.boxplot(x='chas', y='medv', data=df27)
plt.title('Distribution of Median Home Values by Charles River Proximity')
plt.xlabel('Proximity to Charles River (0 = No, 1 = Yes)')
plt.ylabel('Median Value of Homes ($1000s)')
plt.show()

plt.figure(figsize=(10, 6))
sns.regplot(x='age', y='medv', data=df27, scatter_kws={'alpha':0.6}, line_kws={'color':'red'})
plt.title('Relationship between Age of Property and Median Home Value')
plt.xlabel('Age of Property')
plt.ylabel('Median Value of Homes ($1000s)')
plt.show()

# Display 2-3 visualizations of your choice and attributes are your wish.
import seaborn as sns
import matplotlib.pyplot as plt

# Setting the style for the visualizations
sns.set_style("whitegrid")

# Visualization 1: Histogram of MEDV - Median value of owner-occupied homes
plt.figure(figsize=(10, 6))
sns.histplot(df27['medv'], bins=30, kde=True, color='blue')
plt.title('Distribution of Median Value of Homes')
plt.xlabel('Median Value of Homes (in $1000s)')
plt.ylabel('Frequency')
plt.show()

# Visualization 2: Boxplot of RM by CHAS (Charles River dummy variable)
plt.figure(figsize=(10, 6))
sns.boxplot(x='chas', y='rm', data=df27)
plt.title('Box Plot of Number of Rooms by Proximity to Charles River')
plt.xlabel('Proximity to Charles River (0 = Far, 1 = Close)')
plt.ylabel('Number of Rooms')
plt.show()



# Visualization 3: Scatter plot of LSTAT vs. MEDV
plt.figure(figsize=(10, 6))
sns.scatterplot(x='lstat', y='medv', hue='chas', data=df27, palette=['orange', 'green'], alpha=0.6)
plt.title('Relationship Between Lower Status and Median Value of Homes')
plt.xlabel('% Lower Status of the Population')
plt.ylabel('Median Value of Homes (in $1000s)')
plt.show()

# Start coding here
import altair as alt

# Scatter plot of RM vs MEDV
scatter_rm_medv = alt.Chart(df27).mark_circle(size=60).encode(
    alt.X('rm:Q', title='Average Number of Rooms'),
    alt.Y('medv:Q', title='Median Value of Homes ($1000s)'),
    color=alt.Color('chas:N', legend=alt.Legend(title="Proximity to Charles River"), scale=alt.Scale(scheme='set2')),
    tooltip=['rm', 'medv', 'chas']
).interactive()

# Scatter plot of AGE vs MEDV
scatter_age_medv = alt.Chart(df27).mark_circle(size=60).encode(
    alt.X('age:Q', title='Proportion of Units Built Prior to 1940'),
    alt.Y('medv:Q', title='Median Value of Homes ($1000s)'),
    color=alt.Color('chas:N', legend=alt.Legend(title="Proximity to Charles River"), scale=alt.Scale(scheme='set2')),
    tooltip=['age', 'medv', 'chas']
).interactive()

# Concatenate the plots with shared interactive legend
concatenated_plots = alt.hconcat(scatter_rm_medv, scatter_age_medv).resolve_legend(
    color="independent"
)

# Display the concatenated plots
concatenated_plots